Shader "June/LightSwipeCode"
{
    Properties
    {
        _MainTex ("Texture", 2D) = "white" {}
        _RimMin("RimMin",float)=0
        _RimMax("RimMax",float)=1
        //_EmissPower("EmissPow",float)=1
        _ColorInner("ColorInner",Color)=(1,0,0,1)
        _ColorOut("ColorOut",Color)=(0,1,0,1)
        _RimIntensity("RimIntensity",float)=1
        _Speed("Speed",vector)=(1,1,1,1)
        _FlowIntensity("FlowIntensity",float)=1
        _FlowTex("FlowTex",2D)="white"{}
        _FlowColor("FlowColor",Color)=(1,0,0,1)
        _FlowTilting("FlowTilting",Vector)=(1,1,0,0)
        _InnerAlpha("Inner Alpha",float)=1


    }
    SubShader
    {
        Tags { "RenderType"="Transparent" }
        
        LOD 100

        Pass
        {
            ZWrite Off
            Blend srcAlpha One
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag

            #include "UnityCG.cginc"

            struct appdata
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
                float3 normal: NORMAL;
            };

            struct v2f
            {
                float2 uv : TEXCOORD0;
                float4 vertex : SV_POSITION;
                float3 wNormal: TEXCOORD1;
                float3 worldPos: TEXCOORD2;
                float3 worldPivot: TEXCOORD3;
            };

            sampler2D _MainTex;
            float4 _MainTex_ST;
            sampler2D _FlowTex;
            float4 _FlowTex_ST;
            float _RimMin;
            float _RimMax;
            //float _EmissPower;
            float _RimIntensity;
            float _FlowIntensity;
            float4 _ColorInner;
            float4 _ColorOut;
            float4 _Speed;
            float4 _FlowColor;
            float4 _FlowTilting;
            float _InnerAlpha;




            v2f vert (appdata v)
            {
                v2f o;
                o.vertex = UnityObjectToClipPos(v.vertex);
                //牢记如何得到法线
                o.wNormal=UnityObjectToWorldNormal(v.normal);
                //牢记如何得到worldPos
                o.worldPos=mul(unity_ObjectToWorld,v.vertex);
                //计算中心点在世界坐标下的位置
                o.worldPivot=mul(unity_ObjectToWorld,float4(0,0,0,1));

                o.uv = TRANSFORM_TEX(v.uv, _MainTex);
                return o;
            }

            fixed4 frag (v2f i) : SV_Target
            {
                //Get Fresnel Value
                fixed3 N=normalize(i.wNormal);
                fixed3 V=normalize(_WorldSpaceCameraPos-i.worldPos);
                fixed NdotV=saturate(dot(N,V));
                NdotV=1-NdotV;
                fixed Fresnel=smoothstep(_RimMin,_RimMax,NdotV);
                fixed emiss = tex2D(_MainTex, i.uv).r;
                emiss=pow(emiss,5);
                fixed FinalFresnel=saturate(emiss+Fresnel);
                //Rim Color
                fixed3 FinalrimColor=lerp(_ColorInner.xyz,_ColorOut.xyz*_RimIntensity,FinalFresnel);
                //return fixed4(FinalrimColor,FinalFresnel);
                //FlowEffect
                half2 uv_flow=(i.worldPos.xy-i.worldPivot)*_FlowTilting.xy+_Speed.xy*_Time.y;
                fixed4 flowColor=tex2D(_FlowTex,uv_flow)*_FlowIntensity;
                fixed4 Finalflow= flowColor*_FlowColor;
                fixed flowAlpha=flowColor.a;
                
               
                //return Finalflow;

                //FinalColor
                fixed3 finalColor= Finalflow.xyz+FinalrimColor;
                fixed finalAlpha=saturate(FinalFresnel+flowAlpha+_InnerAlpha);
                fixed4 finalOutput= (finalColor,finalAlpha);
                return fixed4(finalColor,finalAlpha);
            }
            ENDCG
        }
    }
}
