Shader "Hidden/ColorAdjustment"
{
    Properties
    {
        _MainTex ("Texture", 2D) = "white" {}
        _Brightness("Brightness",Range(0,3))=1
        _Saturation("Saturation",Range(0,2))=0
        _Contrast("Contrast",Range(0,3))=0
        _HueShift("HueShift",Range(-1,1))=0
        _VignetteIntensity("_VignetteIntensity",Range(0.05,6))=0.5
        _VignetteRoundness("VignetteRoundness",Range(0.05,10))=0.5
        _VignetteSmoothness("VignetteSmoothness",Range(0.05,10))=2
    }
    SubShader
    {
        Cull Off ZWrite Off ZTest Always

        Pass
        {
            CGPROGRAM
            #pragma vertex vert_img
            #pragma fragment frag

            #include "UnityCG.cginc"

            sampler2D _MainTex;
            float _Brightness;
            float _Contrast;
            float _Saturation;
            float _HueShift;
            float _VignetteIntensity;
            float _VignetteRoundness;
            float _VignetteSmoothness;

            float3 HSVToRGB( float3 c )
			{
				float4 K = float4( 1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0 );
				float3 p = abs( frac( c.xxx + K.xyz ) * 6.0 - K.www );
				return c.z * lerp( K.xxx, saturate( p - K.xxx ), c.y );
			}
			
			float3 RGBToHSV(float3 c)
			{
				float4 K = float4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
				float4 p = lerp( float4( c.bg, K.wz ), float4( c.gb, K.xy ), step( c.b, c.g ) );
				float4 q = lerp( float4( p.xyw, c.r ), float4( c.r, p.yzx ), step( p.x, c.r ) );
				float d = q.x - min( q.w, q.y );
				float e = 1.0e-10;
				return float3( abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
			}

            half4 frag (v2f_img i) : SV_Target
            {
                fixed4 col = tex2D(_MainTex, i.uv);
                // Brightness
                half3 outputcolor = col.rgb*_Brightness;
                
                //Saturation Gamma Space
                float lumin=dot(outputcolor,float3(0.22,0.707,0.071));
                 outputcolor=lerp(lumin,outputcolor,_Saturation);
                    //Linear Space
                    //float lumin =dot(finalcolor,float3(0.0396,0.458,0.0061));

                //Contrast
                outputcolor=lerp(float3(0.5,0.5,0.5),outputcolor,_Contrast);

                //vignette 原理为计算屏幕中心点到四角的绝对距离
                float2 d=abs(i.uv-float2(0.5,0.5))*_VignetteIntensity;
                d=pow(saturate(d),_VignetteRoundness);
                float dist=length(d); //向量计算长度 得到中心黑边缘亮
                float vignettefactor=pow(saturate(1.0-dist*dist),_VignetteSmoothness);//反向+锐化
                outputcolor=outputcolor*vignettefactor;

                //HueShift
                outputcolor=RGBToHSV(outputcolor);
                outputcolor.r=outputcolor.r+_HueShift;
                outputcolor=HSVToRGB(outputcolor);
            
                return half4(outputcolor,col.a);
            }
            ENDCG
        }
    }
}
