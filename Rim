Shader "June/Rim"
{
    Properties
    {
        _MainTex ("Texture", 2D) = "white" {}
        _MainColor("MainColor",Color)=(1,1,1,1)
        [Enum(UnityEngine.Rendering.CullMode)]_CullMode("CullMode",float)=2
        _Emiss("EmissionIndex",float)=1
        _RimPower("RimPower",float)=1
    }
    SubShader
    {
        Tags{"Queue" = "Transparent"}
        

        Pass
        {
            Cull [_CullMode]
            //做Alpha 透明shader需要打开的TAG
            ZWrite On
            //透明叠加
            Blend SrcAlpha One
            // Add模式
            //Blend SrcAlpha One
            CGPROGRAM
            //定义一个叫vert的vertex shader
            #pragma vertex vert
            #pragma fragment frag

            #include "UnityCG.cginc"

            struct appdata
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;//第一套uv (最多四套）
                float3 normal:NORMAL;
            };

            struct v2f
            {
                float2 uv : TEXCOORD0;//通用的储存器 差值器 （0~15）
                float4 vertex : SV_POSITION;
                //
                float3 worldNormal: TEXCOORD1;
                float3 worldPos: TEXCOORD2;
            };

            sampler2D _MainTex;
            float4 _MainTex_ST;//Tiling offset的值
            float4 _MainColor;
            float _Emiss;
            float _RimPower;

            v2f vert (appdata v)
            {
                v2f o;
                o.vertex = UnityObjectToClipPos(v.vertex);
                //常用的法线和世界空间的转换
                o.worldNormal=UnityObjectToWorldNormal(v.normal);
                o.worldPos=mul(unity_ObjectToWorld,v.vertex);
                o.uv = TRANSFORM_TEX(v.uv, _MainTex);
                //o.view_world=UnityWorldSpaceViewDir (v.worldPos);
                //o.uv=texcoord0*_MainTex_ST.xy*_MainTex_ST.zw;
                return o;
            }

            fixed4 frag (v2f i) : SV_Target
            {
                //采样一个黑白贴图作为alpha通道
                fixed3 N=normalize(i.worldNormal);
                fixed3 V=normalize(_WorldSpaceCameraPos-i.worldPos);
                fixed NdotV= saturate(dot(N,V));
                fixed rim=pow((1-NdotV),_RimPower);
                //fixed alpha = saturate(tex2D(_MainTex, i.uv).r*_MainColor.a*_Emiss);
                fixed3 col = _MainColor.xyz*_Emiss;
                return fixed4 (col,rim);
            }
            ENDCG
        }
    }
}
